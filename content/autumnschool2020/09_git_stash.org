#+title: Stashing changes
#+description: Reading
#+colordes: #2d5986
#+slug: 09_git_stash
#+weight: 9

* What are Git stashes?

Stashing is a way to put changes aside for some time. Changes can be reapplied later (and/or applied on other branches).

Why would you want to do that?

Having a clean working tree is necessary for many Git operations and recommended for others. If you have changes from an unfinished piece of work getting in the way, you could do an ugly commit to get rid of them. But if you care about having an organized history with meaningful commits (or if you don't want others to see your messy drafts), stashing is a much better alternative.

* Creating a stash

You can stash the changes in your modified files with:

#+BEGIN_src sh
git stash
#+END_src

To also include new (untracked) files, you have to use the ~-u~ flag:

#+BEGIN_src sh
git stash -u
#+END_src

* Listing stashes

Of course, you don't want to lose or forget about your stashes.

You can list them with:

#+BEGIN_src sh
git stash list
#+END_src

Stashes are also shown when you run ~git log~ (with any of its variations) with the ~--all~ flag.

#+BEGIN_mhexample
Example
#+END_mhexample

#+BEGIN_src sh
git log --graph --oneline --all
#+END_src

* Re-applying changes from a stash

To re-apply the changes (or apply them on another branch), you run:

#+BEGIN_src sh
git stash apply
#+END_src

If you had staged changes, you can also restore the state of the index by running instead:

#+BEGIN_src sh
git stash apply --index
#+END_src

If you created multiple stashes, this will apply the last one you created. If this is not what you want, you have to specify which stash you want to use with the reflog syntax:

~stash@{0}~ is the last stash (so you can omit it) \\
~stash@{1}~ is the one before it \\
~stash@{2}~ the one before that \\
etc.

#+BEGIN_mhexample
Example: To apply the stash before last:
#+END_mhexample

#+BEGIN_src sh
git stash apply stash@{1}
#+END_src

* Deleting a stash

You delete the last (or the only) stash with:

#+BEGIN_src sh
git stash drop
#+END_src

Here again, if you want to delete another stash, specify it with its reflog index.

#+BEGIN_mhexample
Example: To delete the antepenultimate stash:
#+END_mhexample

#+BEGIN_src sh
git stash drop stash@{2}
#+END_src

You can apply and delete a stash at the same time with:

#+BEGIN_src sh
git stash pop
#+END_src

This is convenient, but less flexible.

* Comments & questions
