#+title: .gitignore
#+description: Reading
#+colordes: #2d5986
#+slug: 06_git_ignore
#+weight: 6

* Excluding from version control

There are files you really want to put under version control, but there are files you shouldn't.

** What to exclude

*Put under version control:*
- Scripts
- Manuscripts and notes
- Makefile and similar

*Do not put under version control:*
- Non-text files (e.g. images, office documents)
- Outputs that can be recreated by running code (e.g. graphs, results)

** How to exclude

To exclude files from version control, create a file called .gitignore in the root of your project and add those files in it, one per line.

/Example:/

#+BEGIN_src sh
echo graph.png > .gitignore   # this creates .gitignore and adds 'graph.png' to it
echo output.txt >> .gitignore # '>' would overwrite the content. '>>' appends
echo /result/ >> .gitignore   # you can also ignore entire directories
#+END_src

{{<br>}}
You can also use globing patterns.

/Example:/

#+BEGIN_src sh
echo *.png >> .gitignore   # exclude all .png files
#+END_src

{{<br>}}
*Here are the rules of .gitignore syntax:*

Each line in a .gitignore file specifies a pattern.

Blank lines are ignored and can serve as separators for readability.

Lines starting with ~#~ are comments.

To add patterns starting with a special character (e.g. ~#~, ~!~), that character needs to be escaped with ~\~.

Trailing spaces are ignored unless they are escaped with ~\~.

~!~ negates patterns.

Patterns ending with ~/~ match directories. Otherwise patterns match both files and directories.

~/~ at the beginning or within a search pattern indicates that the pattern is relative to the directory level of the .gitignore file. Otherwise the pattern matches anywhere below the .gitignore level.


#+BEGIN_verse
Examples: \\
{{<m>}} ~foo/bar/~ matches the directory {{<b>}}foo/bar{{</b>}}, but not the directory {{<b>}}a/foo/bar{{</b>}} \\
{{<m>}} ~bar/~ matches both the directories {{<b>}}foo/bar{{</b>}} and {{<b>}}a/foo/bar{{</b>}}
#+END_verse

~*~ matches anything except ~/~.

~?~ matches any one character except ~/~.

The range notation (e.g. ~[a-zA-Z]~) can be used to match one of the characters in a range.

A leading ~**/~ matches all directories.

#+BEGIN_verse
Example: {{<n>}} ~**/foo~ matches file or directory {{<b>}}foo{{</b>}} anywhere. This is the same as ~foo~
#+END_verse

A trailing ~/**~ matches everything inside what it precedes.

#+BEGIN_verse
Example: {{<n>}} ~abc/**~ matches all files (recursively) inside directory {{<b>}}abc{{</b>}}
#+END_verse

~/**/~ matches zero or more directories.

#+BEGIN_verse
Example: {{<n>}} ~a/**/b~ matches {{<b>}}a/b{{</b>}}, {{<b>}}a/x/b{{</b>}}, and {{<b>}}a/x/y/b{{</b>}}
#+END_verse

* Comments & questions
