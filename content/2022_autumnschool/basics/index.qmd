---
title: "R: the basics"
description: Zoom
colordes: "#e86e0a"
slug: 04_r_basics
weight: 4
execute:
  error: true
format: hugo
---

## Help and documentation

For some general documentation on R, you can run:

```{.r}
help.start()
```

To get help on a function (e.g. `sum`), you can run:

```{.r}
help(sum)
```

Depending on your settings, this will open a documentation for `sum` in a pager or in your browser.

## R settings

Settings are saved in a `.Rprofile` file. You can edit the file directly in any text editor or from within R.

List all options:

```{.r}
options()
```

Return the value of a particular option:

```{r}
getOption("help_type")
```

Set an option:

```{.r}
options(help_type = "html")
```

## Assignment

R can accept the equal sign (`=`) for assignments, but it is more idiomatic to use the assignment sign (`<-`) whenever you bind a name to a value and to use the equal sign everywhere else.

```{r}
a <- 3
```

Once you have bound a name to a value, you can recall the value with that name:

```{r}
a  # Note that you do not need to use a print() function in R
```

You can remove an object from the environment by deleting its name:

```{r}
rm(a)
a
```

The garbage collector will take care of deleting the object itself from memory.


## Data types and structures

| Dimension | Homogeneous   | Heterogeneous  |
|-----------|---------------|----------------|
| 1 d       | Atomic vector | List           |
| 2 d       | Matrix        | Data frame     |
| 3 d       | Array         |                |

### Atomic vectors

#### With a single element

```{r}
a <- 2
a
typeof(a)
str(a)
length(a)
dim(a)
```

The `dim` attribute of a vector doesn't exist (hence the `NULL`). This makes vectors different from one-dimensional arrays which have a `dim` of `1`.

You might have noticed that `2` is a double (double precision floating point number, equivalent of "float" in other languages). In R, this is the default, even if you don't type `2.0`. This prevents the kind of weirdness you can find in, for instance, Python.

In Python:

```{.python}
>>> 2 == 2.0
True
>>> type(2) == type(2.0)
False
>>> type(2)
<class 'int'>
>>> type(2.0)
<class 'float'>
```

In R:

```{.r}
> 2 == 2.0
[1] TRUE
> typeof(2) == typeof(2.0)
[1] TRUE
> typeof(2)
[1] "double"
> typeof(2.0)
[1] "double"
```

If you want to define an integer variable, you use:

```{r}
b <- 2L
b
typeof(b)
mode(b)
str(b)
```

There are six vector types:

- logical
- integer
- double
- character
- complex
- raw

#### With multiple elements

```{r}
c <- c(2, 4, 1)
c
typeof(c)
mode(c)
str(c)
```

```{r}
d <- c(TRUE, TRUE, NA, FALSE)
d
typeof(d)
str(d)
```

`NA` ("Not Available") is a logical constant of length one. It is an indicator for a missing value.

Vectors are homogeneous, so all elements need to be of the same type.

If you use elements of different types, R will convert some of them to ensure that they become of the same type:

```{r}
e <- c("This is a string", 3, "test")
e
typeof(e)
str(e)
```

```{r}
f <- c(TRUE, 3, FALSE)
f
typeof(f)
str(f)
```

```{r}
g <- c(2L, 3, 4L)
g
typeof(g)
str(g)
```

```{r}
h <- c("string", TRUE, 2L, 3.1)
h
typeof(h)
str(h)
```

The binary operator `:` is equivalent to the `seq()` function and generates a regular sequence of integers:

```{r}
i <- 1:5
i
typeof(i)
str(i)
identical(2:8, seq(2, 8))
```

### Matrices

```{r}
j <- matrix(1:12, nrow = 3, ncol = 4)
j
typeof(j)
str(j)
length(j)
dim(j)
```

The default is `byrow = FALSE`. If you want the matrix to be filled in by row, you need to set this argument to `TRUE`:

```{r}
k <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
k
```

### Arrays

```{r}
l <- array(as.double(1:24), c(3, 2, 4))
l
typeof(l)
str(l)
length(l)
dim(l)
```

### Lists

```{r}
m <- list(2, 3)
m
typeof(m)
str(m)
length(m)
dim(m)
```

As with atomic vectors, lists do not have a `dim` attribute. Lists are in fact a different type of vectors.

Lists can be heterogeneous:

```{r}
n <- list(2L, 3, c(2, 1), FALSE, "string")
n
typeof(n)
str(n)
length(n)
```

### Data frames

Data frames contain tabular data. Under the hood, a data frame is a list of vectors.

```{r}
o <- data.frame(
  country = c("Canada", "USA", "Mexico"),
  var = c(2.9, 3.1, 4.5)
)
o
typeof(o)
str(o)
length(o)
dim(o)
```

## Indexing

Indexing in R starts at `1`.

```{r}
a
a[1]
a[2]
c
c[2]
c[2:4]
j
j[2, 3]
l
l[2, 1, 3]
n
n[3]
typeof(n[3])
n[3][1]
n[[3]]
typeof(n[[3]])
n[[3]][1]
o
o[1]
typeof(o[1])
str(o[1])
o[[1]]
typeof(o[[1]])
o$country
typeof(o$country)
```

## Copy-on-modify

While some languages (e.g. Python) do not make a copy if you modify a mutable object, R does.

Let's have a look at Python:

```{.python}
>>> a = [1, 2, 3]
>>> b = a
>>> b
[1, 2, 3]
>>> a[0] = 4
>>> a
[4, 2, 3]
>>> b
[4, 2, 3]
```

Modifying `a` also modifies `b`. If you want to keep `b` unchanged, you need to explicitly make a copy of `a`.

Now, let's see what happens in R:

```{.r}
> a <- c(1, 2, 3)
> b <- a
> b
[1] 1 2 3
> a[1] <- 4
> a
[1] 4 2 3
> b
[1] 1 2 3
```

Here, the default is to create a new copy in memory when `a` is transformed so that `b` remains unchanged. This is more intuitive, but more memory intensive.

## Function definition

```{r}
compare <- function(x, y) {
  x == y
}
```

We can now use our function:

```{r}
compare(2, 3)
```

Note that the result of the last statement is printed automatically:

```{r}
test <- function(x, y) {
  x
  y
}
test(2, 3)
```

If you want to return other results, you need to explicitly use the `print()` function:

```{r}
test <- function(x, y) {
  print(x)
  y
}
test(2, 3)
```

## Control flow

### Conditionals

```{r}
test_sign <- function(x) {
  if (x > 0) {
    "x is positif"
  } else if (x < 0) {
    "x is negatif"
  } else {
    "x is equal to zero"
  }
}
```

```{r}
test_sign(3)
test_sign(-2)
test_sign(0)
```

### Loops

```{r}
for (i in 1:10) {
  print(i)
}
```

Notice that here we need to use the `print()` function.
