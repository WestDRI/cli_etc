#+title: Exploring the past
#+description: Practice
#+colordes: #dc7309
#+slug: git-09-history
#+weight: 9

* Getting an overview of history

** As a list

{{<c>}}git log{{</c>}} lists all past commits in a pager (so scroll down with {{<b>}}Space{{</b>}} and quit with {{<b>}}q{{</b>}}).

Go back to {{<b>}}git_lesson{{</b>}} and try it out:

#+BEGIN_src sh
cd /path/to/git_lesson
git log
#+END_src

Of course, our history is very short, so our history tree is very simple. For long histories, this is a powerful way to get an overview of the full history.

** As a list with one line per commit

For a compact version with a single line per commit, you can run:

#+BEGIN_src sh
git log --oneline
#+END_src

** Getting fancy

By playing with the various flags of {{<c>}}git log{{</c>}}, you can customize the commit log to your liking: different colors make it easier to read and you can get information about commit author or time while keeping it compact.

To find out about all the available options of {{<c>}}git log{{</c>}}, run {{<c>}}man git-log{{</c>}}.

Try for instance:

#+BEGIN_src sh
git log \
    --graph \
    --date-order \
    --date=short \
    --pretty=format:'%C(cyan)%h %C(blue)%ar %C(auto)%d'`
                   `'%C(yellow)%s%+b %C(black)%ae'
#+END_src

** As a graph

The {{<c>}}--graph{{</c>}} flag allows to view this history in the form of a graph.

#+BEGIN_src sh
git log --graph
#+END_src

This may not seem very useful with our simple history because it is linear with a single branch (a single version of history). But in complex situations with several branches, this can be really useful.

* Exploring past commits

{{<c>}}git log{{</c>}} is great to view the whole history. But maybe you want to explore one particular commit in more detail.

** Checking out a commit

In order to explore a commit, you "check" it "out". This replaces the current content of your working tree with the content of the working tree at that commit. In other words, it allows you to travel back in time to the state of your project at that commit.

To do so, you need the hash of the commit of interest. You can copy it from the output of {{<c>}}git log{{</c>}}.
For example, if the commit of interest has the hash {{<b>}}e7447c2{{</b>}}, you would run:

#+BEGIN_src sh
git checkout e7447c2
#+END_src

/Note: Git prevents you from checking out a commit if this would result in the loss of information: if the commit you want to checkout conflicts with any uncommitted changes, you will first need to commit or stash them. Stashing changes means to put them aside for the time being, so that they aren't in the way: changes are moved out of the working tree and into a "stash", from which they can later be retrieved./

Once you have checked a commit out, you can look at the files.

** The concept of HEAD

When looking at the output of {{<c>}}git log{{</c>}}, you may have noticed this: {{<b>}}(HEAD -> master){{</b>}} and wondered what this was all about.

{{<b>}}HEAD{{</b>}} is a file in the {{<b>}}.git{{</b>}} directory of your project. You should go to that directory and look for it.

It is a pointer to the current branch. In our case, we only have one branch since we never created any additional branch. By defaut, that branch is called {{<b>}}master{{</b>}}.

{{<b>}}(HEAD -> master){{</b>}} means that we are on the branch {{<b>}}master{{</b>}}. In other words, {{<b>}}HEAD{{</b>}} is pointing at the branch {{<b>}}master{{</b>}}.

If you run {{<c>}}git log{{</c>}} again now, you will see that {{<b>}}HEAD{{</b>}} is not pointing at {{<b>}}master{{</b>}} anymore. It is pointing directly at the commit we checked out. We are now in a "detached HEAD state". This is fine to look at the past, but it is not a state in which to work and make changes as the changes would be lost.

** Going back to "the present"

To return to the latest commit, you need to "reattach HEAD" and have it point again at the branch {{<b>}}master{{</b>}}.

This is done by ckecking out {{<b>}}master{{</b>}}:

#+BEGIN_src sh
git checkout master
#+END_src

* Comments & questions
