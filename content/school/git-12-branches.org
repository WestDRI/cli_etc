#+title: Working with branches
#+description: Practice
#+colordes: #dc7309
#+slug: git-12-branches
#+weight: 13

As you must be starting to realize, Git is a powerful tool. One of its greatest features is how easy it makes branching workflows.

* What is a branch?

A branch is a *pointer* to a commit (under the hood, it is a small file containing the 40 character SHA-1 checksum of the commit it points to).

* How to create a branch?

** Initial branch (master)

When you run {{<c>}}git init{{</c>}} to initialize a repository, a branch gets created and it is called {{<b>}}master{{</b>}} (you could rename it to something else if you wanted—that initial branch, despite its name, has nothing special).

So as soon as you start working on your project, there is one branch ({{<b>}}master{{</b>}}) and you are on it. Wait... what does this mean to be /on a branch/? There is another pointer, of a special nature, called {{<b>}}HEAD{{</b>}} that keeps track of where you are. And {{<b>}}HEAD{{</b>}} points to {{<b>}}master{{</b>}}.

To see this, you can run {{<c>}}git log{{</c>}} (or a more compact version {{<c>}}git log --oneline{{</c>}}). You can see that {{<b>}}HEAD{{</b>}} points to {{<c>}}master{{</c>}}.

Since there are a lot of pointers, let's make this clear:

{{<b>}}HEAD{{</b>}} is a pointer to the branch {{<b>}}master{{</b>}} which is itself a pointer to a commit.

As you make commits, the {{<b>}}master{{</b>}} pointer and {{<b>}}HEAD{{</b>}} which points to it move automatically to the latest commit.

** Additional branches

You can create an additional branch with:

#+BEGIN_example
git branch <branch-name>
#+END_example

{{<exercise>}}
Create a new branch called {{<b>}}test{{</b>}}.
{{</exercise>}}

This creates a new pointer to the commit you are on (so now, there are 2 pointers to that commit). But {{<b>}}HEAD{{</b>}} is still pointing to {{<b>}}master{{</b>}}, so you are still on the same {{<b>}}master{{</b>}} branch you've been on all along.

{{<exercise>}}
Run {{<c>}}git log --online{{</c>}} to see that you are still on the branch {{<b>}}master{{</b>}}, but that there is now a second branch called {{<b>}}test{{</b>}}.
{{</exercise>}}

* How to switch branch?

To switch branch, you use a command we have already used many times to go to a previous commit: {{<c>}}git checkout{{</c>}}. What we were already doing then was moving {{<c>}}HEAD{{</c>}} around! Except that we were moving it between commits. This time, we are moving it between branches.

So switching branch is done with:

#+BEGIN_example
git checkout <branch-name>
#+END_example

{{<exercise>}}
Switch to your new branch {{<b>}}test{{</b>}}, then run {{<c>}}git log --oneline{{</c>}} again.
{{</exercise>}}

** Creating a branch and switching to it immediately

When you create a branch, most of the time you want to switch to it. So there is a command which allows to create a branch and switch to it immediately without having to do this in two steps:

#+BEGIN_example
git checkout -b <name-new-branch>
#+END_example

This command is convenient: when you create a branch with {{<b>}}git branch &lt;branch-name&gt;{{</b>}}, it is easy to forget to switch to the new branch before making commits!

* How to merge branches back together?

One thing that makes Git branches powerful is—as we just saw—how easy it is to create new branches and to switch from one branch to another. Another thing is how easy it is to /merge/ branches together.

If you created an experimental branch and are happy with the result, you'll want to merge it into your main branch (usually {{<b>}}master{{</b>}}).

- First, switch to the main development branch (e.g. {{<c>}}git checkout master{{</c>}})
- Then, merge your experimental branch into the main branch:

#+BEGIN_example
git merge <branch-to-merge-into-current-branch>
#+END_example

/Example:/

If your main development branch is {{<b>}}master{{</b>}} and your experimental branch is called {{<b>}}experiment{{</b>}}, you'd run:

#+BEGIN_src sh
git checkout master
git merge experiment
#+END_src

** Merge conflicts

As you were developing your experimental branch, maybe you were also developing your main branch. As long as the differences between the branches do not overlap (you have been working on different parts of the project in each branch, which can include different parts of the same file), there is no problem.

If the two branches contain different versions of the same part of a file however, Git cannot know which of the versions you want to keep. The merge will then be interrupted and Git will ask you to resolve the conflict before the merge can be completed.

We will talk about how to resolve merge conflicts in our Zoom session [[https://westgrid-cli.netlify.app/school/git-14-collaborating.html#headline-3][Collaborating through GitHub]] since such conflicts can also arise when you work with other people on a project.

Once the conflict is resolved, you can finish the merge with {{<c>}}git commit{{</c>}} (Git will automatically write the message, but you can edit it if you wish).

* How to delete a branch?

Once you have merged a branch into another or if you decide that the experiments on a branch are not worth keeping, you can delete that branch with:

#+BEGIN_example
git branch -d <branch-name>
#+END_example

/Example:/

In our previous scenario, you'd run:

#+BEGIN_src sh
git branch -d experiment
#+END_src

* Branch summary

Branches are a great way to experiment in projects in a safe way. If you don't like the result, you can simply get rid of the branch. If you like it, you can merge it with {{<b>}}master{{</b>}}.

#+BEGIN_src sh
# show all branches (current branch marked with *)
git branch

# create a new branch called <name>
git branch <name>

# checkout branch <name>
git checkout <name>

# create a branch called <name> and switch to it
git checkout -b <name>

# delete branch <name>
git branch -d <name>
#+END_src

* Comments & questions
