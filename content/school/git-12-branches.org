#+title: Working with branches
#+description: Practice
#+colordes: #dc7309
#+slug: git-12-branches
#+weight: 13

As you must be starting to realize, Git is a powerful tool. One of its greatest features is how easy it makes branching workflows.

* What is a branch?

A branch is a *pointer* to a commit (under the hood, it is a small file containing the 40 character SHA-1 checksum of the commit it points to).

* How to create a branch?

** Initial branch (master)

When you run {{<c>}}git init{{</c>}} to initialize a repository, a branch gets created and it is called {{<b>}}master{{</b>}} (you could rename it to something else if you wantedâ€”that initial branch, despite its name, has nothing special).

So as soon as you start working on your project, there is one branch ({{<b>}}master{{</b>}}) and you are on it. Wait... what does this mean to be /on a branch/? There is another pointer, of a special nature, called {{<b>}}HEAD{{</b>}} that keeps track of where you are. And {{<b>}}HEAD{{</b>}} points to {{<b>}}master{{</b>}}.

To see this, you can run {{<c>}}git log{{</c>}} (or a more compact version {{<c>}}git log --oneline{{</c>}}). You can see that {{<b>}}HEAD{{</b>}} points to {{<c>}}master{{</c>}}.

Since there are a lot of pointers, let's make this clear:

{{<b>}}HEAD{{</b>}} is a pointer to the branch {{<b>}}master{{</b>}} which is itself a pointer to a commit.

As you make commits, the {{<b>}}master{{</b>}} pointer and {{<b>}}HEAD{{</b>}} which points to it move automatically to the latest commit.

** Additional branches

You can create an additional branch with:

#+BEGIN_example
git branch <branch-name>
#+END_example

{{<exercise>}}
Create a new branch called {{<b>}}test{{</b>}}.
{{</exercise>}}

This creates a new pointer to the commit you are on (so now, there are 2 pointers to that commit). But {{<b>}}HEAD{{</b>}} is still pointing to {{<b>}}master{{</b>}}, so you are still on the same {{<b>}}master{{</b>}} branch you've been on all along.

{{<exercise>}}
Run {{<c>}}git log --online{{</c>}} to see that you are still on the branch {{<b>}}master{{</b>}}, but that there is now a second branch called {{<b>}}test{{</b>}}.
{{</exercise>}}

* How to switch branch?

To switch branch, you use a command we have already used many times to go to a previous commit: {{<c>}}git checkout{{</c>}}. What we were already doing then was moving {{<c>}}HEAD{{</c>}} around! Except that we were moving it between commits. This time, we are moving it between branches.

So switching branch is done with:

#+BEGIN_example
git checkout <branch-name>
#+END_example

{{<exercise>}}
Switch to your new branch {{<b>}}test{{</b>}}, then run {{<c>}}git log --oneline{{</c>}} again.
{{</exercise>}}

** Creating a branch and switching to it immediately

When you create a branch, most of the time you want to switch to it. So there is a command which allows to create a branch and switch to it immediately without having to do this in two steps:

#+BEGIN_example
git checkout -b <name-new-branch>
#+END_example

This command is convenient: when you create a branch with {{<b>}}git branch &lt;branch-name&gt;{{</b>}}, it is easy to forget to switch to the new branch before making commits!

* How to delete a branch?

Once you have merged a branch into another or if you decide that the experiments on a branch are not worth keeping, you can delete that branch with:

#+BEGIN_example
git branch -d <branch-name>
#+END_example

* Comments & questions
