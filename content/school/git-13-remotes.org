#+title: Remotes
#+description: Practice
#+colordes: #dc7309
#+slug: git-13-remotes
#+weight: 14

Remotes are instances of a repository on a network, on the web, on external drives... Departmental servers, USB keys, and version control repository hosting services like [[https://github.com/][GitHub]], [[https://about.gitlab.com/][GitLab]], or [[https://bitbucket.org/][Bitbucket]] can all serve as remotes.

In this course, we will use [[https://github.com/][GitHub]] as the host for our remotes. If you haven't yet done so, [[https://westgrid-cli.netlify.app/school/git-03-install.html#headline-4][create a free GitHub account]].

* Creating a project on GitHub

Your project ({{<b>}}git_lesson{{</b>}}), though under version control, for now only resides on your computer. If you want to collaborate with others, having a remote on the web is really convenient.

Go to your GitHub account webpage, select the {{<b>}}Repositories{{</b>}} tab, then click the green {{<b>}}New{{</b>}} button.

Enter the name of your repo, avoiding spaces. It can be the name you had on your computer (it would be sensible and make things less confusing), but it doesn't have to be.

You can make your repository public or private. In a real scenario, you would make it private if it contained sensitive information (e.g. unpublished research) or public if you wanted to make it available to others or to develop an open source project.

Here, we will go with the public option because, while GitHub free accounts allow private repositories, not all team options are available on private repositories for free accounts.

Now, you have this empty repository on GitHub, but it is not connected to your local repository. So let's go back to our local repository (so back to Git Bash or your terminal).

* Managing remotes

** List remotes

To list the remotes associated with your project, run:

#+BEGIN_src sh
git remote
#+END_src

And to see their address:

#+BEGIN_src sh
git remote -v
#+END_src

Since we haven't added any remote to our project yet, this should not return anything.

** Add remotes

This is how you add a remote:

#+BEGIN_example
git remote add <remote-name> <remote-address>
#+END_example

{{<b>}}&lt;remote-name&gt;{{</b>}} is the name you give to your remote. Usually, the name {{<b>}}origin{{</b>}} is used.

{{<b>}}&lt;remote-address&gt;{{</b>}} is the address of your remote in the https form or—[[https://westgrid-cli.netlify.app/school/git-03-install.html#headline-5][if you have set SSH for your GitHub account]]—the SSH form.

/Example (using an SSH address):/

#+BEGIN_example
git remote add origin git@github.com:<github-username>/<repo-name>.git
#+END_example

/Example (using an HTTPS address):/

#+BEGIN_example
git remote add origin https://github.com/<github-username>/<repo-name>.git
#+END_example

{{<exercise>}}
- Add your new GitHub repo as the remote to your {{<b>}}git_lesson{{</b>}} project and call it {{<b>}}origin{{</b>}}<br>
- Run {{<c>}}git remote -v{{</c>}} now to see that you now have a remote
{{</exercise>}}

** Rename remotes

You rename a remote with:

#+BEGIN_example
git remote rename <old-remote-name> <new-remote-name>
#+END_example

** Remove remotes

And you delete a remote with:

#+BEGIN_example
git remote remove <remote-name>
#+END_example

* Working with remotes

** Pushing

You now have a remote, but it is empty. You need to /push/ the branches of your local repo to update your remote with your project history:

#+BEGIN_example
git push <remote-name> <branch-name>
#+END_example

/Example:/

#+BEGIN_src sh
git push origin master
#+END_src

...will push your {{<b>}}master{{</b>}} branch to your remote.

{{<exercise>}}
- Run this, then refresh your GitHub repo page <br>
- You should see the content of your master branch <br>
- There is a branch drop down menu above your username. If you click on it, you will see that {{<b>}}master{{</b>}} is the only branch <br>
- Now pull your other branch to your remote and go make sure that it is there (you need to refresh the page)
{{</exercise>}}

You could use {{<b>}}git push &lt;remote-name&gt; &lt;branch-name&gt;{{</b>}} every time you want to push to your remote. But you can also associate a branch to a remote by pushing once with the flag {{<c>}}--set-upstream{{</c>}}:

#+BEGIN_example
git push --set-upstream <remote-name> <branch-name>
#+END_example

This will associate your local branch called {{<b>}}&lt;branch-name&gt;{{</b>}} with a branch of the same name in your remote.

After you have run this once, when you have checked out the branch {{<b>}}&lt;branch-name&gt;{{</b>}}, you simply need to run {{<c>}}git push{{</c>}}.

{{<exercise>}}
- Associate {{<b>}}master{{</b>}} to your remote <br>
- Try to run {{<c>}}git push{{</c>}} from {{<b>}}master{{</b>}}<br>
- Check out another branch <br>
- Try {{<c>}}git push{{</c>}} (it shouldn't work since you have not set any remote for that branch) <br>
- Associate that branch to your remote <br>
- Try {{<c>}}git push{{</c>}} again
{{</exercise>}}

** Fetching

Now, if your collaborators also work on the project and push to it, you want to get their changes to your local repository:

#+BEGIN_example
git fetch <remote-name>
#+END_example

/Example:/

#+BEGIN_src sh
git fetch origin
#+END_src

This downloads the updates to your local repository, but it does not merge it with your work. You have to do this with {{<c>}}git merge{{</c>}} as we saw in [[https://westgrid-cli.netlify.app/school/git-12-branches.html#headline-7][the branch lesson]].

** Pulling


* Comments & questions
