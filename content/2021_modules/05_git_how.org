#+title: Understanding Git
#+description: Reading
#+colordes: #2d5986
#+slug: 05_git_how
#+weight: 5

* Project history

One of the main goals of Git is to record the history of a project. Let's start with the big picture and see what a project history is.

** Git saves the history of a project as a series of snapshots

{{<img src="/img/git/git_img/diagrams2/01.png" margin="rem" title="" width="%" line-height="0.5rem">}}
{{</img>}}

*** What is a snapshot?

[[https://stackoverflow.com/a/32806416/9210961][A Stack Overflow user had this sentence about Git snapshots]]:

#+BEGIN_quote
Snapshot is to a repository as screenshot is to a video.
#+END_quote

It is a good metaphor: if you think of the entire life of your project, a snapshot is a record of its state at a moment in time. It is a version of the project.

** Snapshots metadata

Now, for these snapshots to be of any use, we need a system and some metadata to organize and access them.

Whenever you record a snapshot, a Git object pointing at this snapshot and called a /commit/ is created. Each commit is identified by a unique 40-character checksum SHA-1 often simply referred to as a "hash".

#+BEGIN_note
Example of a Git hash: 1f5eaef51fcef3f3410dfe8696ff924b10d25b31
#+END_note

We usually only use the first 7 characters of the hash, which is always enough to identify it:

#+BEGIN_note
In the example above: 1f5eaef
#+END_note

Each commit contains the following metadata:

- the author of the snapshot,
- the date and time at which the snapshot was taken,
- the hash of its parent commit(s) so that Git can keep track of where it fits in the project history relative to other commits,
- a commit message.

The first three are generated automatically by Git. The commit message is a summary of the commit that you write for future you or for your collaborator and which will make it easier to identify this commit and what is in the snapshot it points to in the future.

{{<img src="/img/git/git_img/diagrams2/02.png" margin="rem" title="" width="%" line-height="0.5rem">}}
{{</img>}}

Thanks to the commits, we don't have a messy list of versions, but an organized chronological history. Commits also allow us to identify, inspect, or retrieve specific versions of the project.

Since commits and snapshots are so closely associated, people often use the word "commit" to mean "the snapshot a commit is pointing to".

* How are these snapshots created?

Now, let's zoom in a bit and try to understand how these snapshots are created. This becomes a little bit more technical, but it is important to understand Git.

** The 3 trees of Git

*** Working directory

Let's imagine that you are starting to work on a project.

First, you create a directory. \\
In it, you create several sub-directories. \\
In those, you create a number of files.

You can open these files, read them, edit them, etc. This is something you are very familiar with.

In the Git world, this is the {{<emph>}}working directory{{</emph>}} or {{<emph>}}working tree{{</emph>}} of the project. \\
That is: an uncompressed version of your files that you can access and edit.\\
You can think of it as a sandbox because this is where you can experiment with the project. This is where the project gets developed.

Now, Git has two other important pieces in its architecture.

*** Index

If you want the project history to be useful to future you, it has to be nice and tidy. You don't want to record snapshots haphazardly or you will never be able to find anything back.

Before you record a snapshot, you carefully select the elements of the project as it is now that would be useful to write to the project history together. The {{<emph>}}index{{</emph>}} or {{<emph>}}staging area{{</emph>}} is what allows to do that: it contains the suggested future snapshot.

*** HEAD

Finally, the last important piece of Git's architecture is the last snapshot you created: if you want to see what you have been experimenting on in your "sandbox", you need to compare the state of the working directory with that snapshot.

There is a little pointer called "HEAD" pointing at the commit of that snapshot. By extension {{<emph>}}HEAD{{</emph>}} is often used to refer to that snapshot.

#+BEGIN_note
Note that we can move the pointer "HEAD" around. So it is not always at the last commit you created, but let's keep things simple for now.
#+END_note

*** Status of the 3 trees

To display the status of these trees, you run:

#+BEGIN_src sh
git status
#+END_src

** Workflow

Let's see what happens as you work on a project under version control with Git.

After you have created a snapshot, the three trees are in the same state (we say that the working tree is "clean").

#+BEGIN_note
Here is an example for a project with a single file called ~File~ after the first snapshot was created. Let's say that it is at version ~v1~:
#+END_note

{{<img src="/img/git/git_img/diagrams/12.png" title="" width="%" line-height="0rem">}}
{{</img>}}

*** Making changes to the working tree

When you edit files in your project, you make changes in the *working directory* or *working tree*.

#+BEGIN_note
For instance, you make a change to ~File~. Let's say that it is now at version ~v2~:
#+END_note

{{<img src="/img/git/git_img/diagrams/15.png" title="" width="%" line-height="0rem">}}
{{</img>}}

The other two trees remain at version ~v1~.

If you run ~git status~, this is what you get:

#+BEGIN_src sh
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File

no changes added to commit (use "git add" and/or "git commit -a")
#+END_src

*** Staging changes

You /stage/ that file (meaning that you will include the changes of that file in the next snapshot) with:

#+BEGIN_src sh
git add File
#+END_src

After which, your Git trees look like this:

{{<img src="/img/git/git_img/diagrams/16.png" title="" width="%" line-height="0rem">}}
{{</img>}}

Now, the index also has ~File~ at version ~v2~ and ~git status~ returns:

#+BEGIN_src sh
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   File
#+END_src

*** Committing changes

Finally, you create a snapshot and the commit pointing to it—recording the staged changes to history—with:

#+BEGIN_src sh
git commit -m "Added File"
#+END_src

~-m~ is a flag that allows to provide the commit message directly in the command line. If you don't use it, Git will open a text editor so that you can type the message. Without a message, there can be no commit.

Now your trees look like this:

{{<img src="/img/git/git_img/diagrams/17.png" title="" width="%" line-height="0rem">}}
{{</img>}}

We are back where we were at the start of this section, except that we have created an additional snapshot.

Our working tree is clean again and ~git status~ returns:

#+BEGIN_src sh
On branch main
nothing to commit, working tree clean
#+END_src

This means that there are no uncommitted changes in the working tree or the staging area: all the changes have been written to history.

#+BEGIN_note
Note that you don't have to stage *all* the changes in the working directory before making a commit; that is actually the whole point of the staging area (see below).

This means that the working directory is not necessarily clean after you have created a new commit.
#+END_note

*** Why a two-stage process?

Why do we first need to stage before we can commit? This allows you to pick and choose the changes that you want to include in a commit.

As a result, instead of having a messy bag of all your current changes whenever you write a commit, you can select changes that constitute a coherent unit and commit them together, leaving unrelated changes to be committed later.

This allows for a clearer history that will be much more useful in the future.

#+BEGIN_note
*Example scenario:*

You are working on a paper.

While writing the introduction of the manuscript, you realize that you made a mistake in your code and fix it. This leads to changes in the result section that you had already written and committed.

At the end of all this, without this two-stage process, you would have to create a commit with totally unrelated changes.

With this system, you can stage the correction of your code and of the result section of the manuscript and create a meaningful commit with only those ("Fix error caused by ..."). Then, separately, you can stage and commit the introduction ("Add first draft of introduction").
#+END_note

We don't work in perfectly linear and organized fashion: we tend to jump from one thing to another. To make it a lot easier when we will need to revisit our project history, it is better to create a history that is more organized that the real chronological history of our work events.

* Comparing trees with one another

~git diff~ can show the differences between any two of your three trees.

Let's imagine that our three trees look like this:

{{<img src="/img/git/git_img/diagrams/50.png" title="" width="%" line-height="0rem">}}
{{</img>}}

We have a markdown manuscript (symbolized by ~.md~ in the figure) and a Python script (symbolized by ~.py~).

In our last commit, we saved a snapshot while they were at version ~vx~ and ~vy~ respectively. This is what ~HEAD~ shows (~HEAD~ points to our last commit).

Then we made changes to the manuscript (so it is now at version ~vx+1~ in the working directory) and we staged those changes (so ~.md~ is also at version ~vx+1~ in the index).

Finally, we made changes to our script (which is thus now at version ~vy+1~ in the working directory), but we did not stage those changes.

At this point, our three trees are all different from each other.

** Difference between the working directory and the index

{{<img src="/img/git/git_img/diagrams/51.png" title="" width="%" line-height="0rem">}}
{{</img>}}

That's all your unstaged changes on tracked files (new files will not be shown)*.

You can get those differences with:

#+BEGIN_src sh
git diff
#+END_src

This will show you all the differences in the Python script between versions ~vy~ and ~vy+1~.

/*Git can detect new files you have never staged: it lists them in the output of ~git status~. Until you put them under version control by staging them for the first time however, Git has no information about their content: at this point, they are untracked and they are not part of the working tree yet. So their content never appears in the output of ~git diff~./

** Difference between the index and your last commit

{{<img src="/img/git/git_img/diagrams/52.png" title="" width="%" line-height="0rem">}}
{{</img>}}

That's your staged changes ready to be committed. That is, that's what would be committed by ~git commit -m "Some message"~.

You get those differences with:

#+BEGIN_src sh
git diff --cached
#+END_src

This will show you all the differences in the markdown manuscript between versions ~vx~ and ~vx+1~.

** Difference between the working directory and your last commit

{{<img src="/img/git/git_img/diagrams/53.png" title="" width="%" line-height="0rem">}}
{{</img>}}

This is the combination of the previous two, that is, all your staged and unstaged changes (again, only on tracked files).

You can display those differences with:

#+BEGIN_src sh
git diff HEAD
#+END_src

This will show you the differences in the Python script between versions ~vy~ and ~vy+1~ and in the markdown manuscript between versions ~vx~ and ~vx+1~.

* Commit history

When you write a commit, the proposed snapshot that was in your staging area gets archived inside the ~.git~ repository in a compressed form and is now part of your project history.

~HEAD~ is a pointer indicating where you currently are in the commit history.

After you have made your first commit, this is what your history looks like:

{{<img src="/img/git/git_img/diagrams/13.png" title="" width="%" line-height="0.5rem">}}
{{</img>}}

~HEAD~ points to ~master~ which is the name Git gives to the default branch when you initialize a Git repository. We will talk about branches later. ~24duu71~ is the short SHA-1 of your first commit (the 7 first characters of the SHA-1 for that commit).

{{<br>}}
If you make new changes in your project, stage all or some of them, and create a new commit, as we saw earlier, your history will then look like:

{{<img src="/img/git/git_img/diagrams/18.png" title="" width="%" line-height="0.5rem">}}
{{</img>}}

Here is what happened when you created that new commit:

- a new snapshot got archived,
- a new commit (with a new unique SHA-1) pointing to that snapshot got created,
- the ~master~ branch and ~HEAD~ moved to point to the new commit.

{{<br>}}
After another two commits, your history looks like this:

{{<img src="/img/git/git_img/diagrams/21.png" title="" width="%" line-height="0rem">}}
{{</img>}}

{{<br>}}
From now on, since every commit points to a snapshot of your project, I will represent simplified graphs in this way:

{{<img src="/img/git/git_img/diagrams/22.png" title="" width="%" line-height="0rem">}}
{{</img>}}

* Displaying the commit history

~git log~ lists past commits in a pager (~less~ by default) and allows you to get an overview of a project history.

It comes with many flags which allow countless variations. Here are few useful ones:

** Log as a list

By default ~git log~ gives a lot of information for each commit. While this is sometimes useful, if you want to get a clear picture of your overall project history, it may be better to reduce each commit log to a one-liner:

#+BEGIN_src sh
git log --oneline
#+END_src

You can customize the commit log to your liking by playing with colors, time format, etc.

Try for instance:

#+BEGIN_src sh
git log \
    --graph \
    --date-order \
    --date=short \
    --pretty=format:'%C(cyan)%h %C(blue)%ar %C(auto)%d'`
                   `'%C(yellow)%s%+b %C(magenta)%ae'
#+END_src

To see all the available flags, run ~man git-log~.
 
** Log as a graph

The ~--graph~ flag allows to view this history in the form of a graph.

#+BEGIN_src sh
git log --graph
#+END_src

This may not seem very useful with our simple history because it is linear with a single branch, but in complex histories with several branches, this is really helpful.


* Comments & questions
