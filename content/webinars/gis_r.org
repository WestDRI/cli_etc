#+title: GIS with R
#+topic: R
#+slug: gis_r
#+date: 2020-12-09
#+place: 60 min live webinar

*** /Abstract/

#+BEGIN_definition
This webinar introduces basic GIS data manipulation and mapping in R with the packages ~sf~ and ~tmap~.

We will use data on the retreat of North American glaciers as an example.
#+END_definition

* Datasets

A good starting place to look for open source GIS datasets is the  [[https://freegisdata.rtwilson.com/][Free GIS Data]] page.

The datasets that we will use for this webinars are the Alaska and the Western Canada and USA subsets of the [[http://www.glims.org/RGI/][Randolph Glacier Inventory]] version 6.0{{<fl n="1">}} and the [[https://www.sciencebase.gov/catalog/item/58af7022e4b01ccd54f9f542][USGS time series of the named glaciers of Glacier National Park]]{{<fl n="2">}}. These datasets can be downloaded as zip files from the respective websites.

For our basemap, we will use data from [[https://www.naturalearthdata.com/][Natural Earth]]. This dataset can be accessed direction from within R thanks to the packages ~rnaturalearth~ (which provides the functions) and ~rnaturalearthdata~ (which provides the data).

{{<fn>}}
{{<fl n="1">}}RGI Consortium (2017). Randolph Glacier Inventory â€“ A Dataset of Global Glacier Outlines: Version 6.0: Technical Report, Global Land Ice Measurements from Space, Colorado, USA. Digital Media. DOI: https://doi.org/10.7265/N5-RGI-60.{{<2br>}}
{{<fl n="2">}}Fagre, D.B., McKeon, L.A., Dick, K.A., and Fountain, A.G., 2017, Glacier margin time series (1966, 1998, 2005, 2015) of the named glaciers of Glacier National Park, MT, USA: U.S. Geological Survey data release, https://doi.org/10.5066/F7P26WB1.
{{</fn>}}

* Load necessary packages

#+BEGIN_src R
library(sf)
library(tmap)
library(dplyr)
library(magrittr)
library(purrr)
library(rnaturalearth)
library(rnaturalearthdata)
library(grid)
#+END_src

* Retreat of glaciers

What is interesting about glacier maps is to see their evolution through time as glaciers retreat due to climate change. While the Randolph Glacier Inventory (RGI) has an amazing map in terms of spacial coverage, it doesn't yet have much temporal data.

To look at glacier retreat, we will thus look at the [[https://www.sciencebase.gov/catalog/item/58af7022e4b01ccd54f9f542][USGS time series of the named glaciers of Glacier National Park]]{{<fl n="2">}}. These 4 datasets have contour lines of 39 glaciers for the years 1966, 1998, 2005, and 2015.

** Load and prepare the data

We could load and clean the datasets one by one. Copying and pasting code however is inefficient and error-prone. A better approach is to do this in a functional programming framework: create a function which does all the data loading and cleaning, then pass each element of a vector of the paths of all 4 datasets to it using ~purrr::map~.

"Cleaning" here consists of selecting the variables we are interested in, putting them in the same order in all datasets (they were not initially) and giving the exact same name across all datasets (there were case inconsistencies between datasets and R is case sensitive).

#+BEGIN_src R
## create a function that reads and cleans the data
prep <- function(dir) {
  g <- st_read(dir)
  g %<>% rename_with(~ tolower(gsub("Area....", "area", .x)))
  g %<>% select(
    year,
    objectid,
    glacname,
    area,
    shape_leng,
    x_coord,
    y_coord,
    source_sca,
    source
  )
}

## create a vector of dataset names
dirs <- grep("GNPglaciers_.*", list.dirs(), value = T)

## pass each element of that vector through prep() thanks to map()
g <- map(dirs, prep)
#+END_src

~map()~ returns a list, so we now have a list (~g~) of 4 elements: the 4 sf objects containing our cleaned datasets. A list is not really convenient and we will turn it into a single sf object.

Before doing so however, we want to make sure that they all have the same CRS.

#+BEGIN_src R
st_crs(g[[1]]) == st_crs(g[[2]])
st_crs(g[[1]]) == st_crs(g[[3]])
st_crs(g[[1]]) == st_crs(g[[4]])
#+END_src

They do, so we can turn ~g~ into a single sf object:

#+BEGIN_src R
g <- do.call("rbind", g)

g
str(g)
st_crs(g)
#+END_src

** Map of a single glacier

Each glacier has 4 borders: one for each year of survey. They are however quite hard to see on such a large map.

Let's zoom on the Agassiz glacier.

#+BEGIN_src R
## select the data points corresponding to the Agassiz Glacier
agassiz <- g %>% filter(glacname == "Agassiz Glacier")
#+END_src

And map it.

#+BEGIN_src R
tm_shape(ag) +
  tm_polygons("year", palette = "Blues") +
  tm_layout(
    title = "Agassiz Glacier",
    title.position = c("center", "top"),
    legend.position = c("left", "bottom"),
    legend.title.color = "#fcfcfc",
    legend.text.size = 1,
    bg.color = "#fcfcfc",
    inner.margins = c(0.07, 0.03, 0.07, 0.03),
    outer.margins = 0
  ) +
  tm_compass(
    type = "arrow",
    position = c("right", "top"),
    text.size = 0.7
  ) +
  tm_scale_bar(
    breaks = c(0, 0.5, 1),
    position = c("right", "BOTTOM"),
    text.size = 1
  )
#+END_src

#+BEGIN_note
Note: I didn't want to show the legend title and because there is no option to remove it, I set its color to that of the background.
#+END_note

{{<br>}}
{{<img src="/img/gis_r/ag.png" margin="rem" title="" width="50%" line-height="0.5rem">}}
{{</img>}}

** Animated map

We can create an animation to show the retreat of the Agassiz glacier.

#+BEGIN_src R
agassiz_anim <- tm_shape(ag) +
  tm_polygons("year", palette = "Blues") +
  tm_layout(
    title = "Agassiz Glacier",
    title.position = c("center", "top"),
    legend.position = c("left", "bottom"),
    legend.title.color = "#fcfcfc",
    legend.text.size = 1,
    bg.color = "#fcfcfc",
    inner.margins = c(0.07, 0.03, 0.07, 0.03),
    outer.margins = 0
  ) +
  tm_compass(
    type = "arrow",
    position = c("right", "top"),
    text.size = 0.7
  ) +
  tm_scale_bar(
    breaks = c(0, 0.5, 1),
    position = c("right", "BOTTOM"),
    text.size = 1
  ) +
  tm_facets(along = "year", free.coords = F)

tmap_animation(agassiz_anim, filename = "ag.gif", delay = 100)
#+END_src

{{<img src="/img/gis_r/ag.gif" margin="rem" title="" width="70%" line-height="0.5rem">}}
{{</img>}}

* Video

{{<ytmh vWwbwROqn6w>}}

* Comments & questions
