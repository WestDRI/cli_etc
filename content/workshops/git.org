#+title: Version control with Git
#+slug: git

#+OPTIONS: toc:2

#+BEGIN_export html
{{< pic
src="/img/workinprogress.svg"
title="Patience... patience..."
width="200"
>}}
#+END_export

**** /Abstract/

#+BEGIN_definition

#+END_definition

**** /Software requirements/

#+BEGIN_box

#+END_box

# #+BEGIN_export html
# <div class="figcom">
#   <em>(from <a href="https://xkcd.com/">xkcd.com</a>)</em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
# </div>
# #+END_export

* Prerequisites

For this workshop, you need:

- src_sh{git}
- a [[https://github.com/][GitHub]] account

* Version control

#+BEGIN_QUOTE
Why?
#+END_QUOTE

** Any easy way to keep track and navigate the whole history of a project

#+BEGIN_export html
{{< img src="/img/git_phdcomics.png" title="Life before Git..." width="500" >}}
#+END_export

** Any easy way to collaborate synchronously

#+BEGIN_CENTER
https://user-images.githubusercontent.com/4634851/39488302-a612395a-4d36-11e8-8844-5d7236dc44a5.png
#+END_CENTER

* Getting help

First things first: how to get help on git?

To get a manual chapter on a command, type:

#+BEGIN_EXAMPLE
git &lt;command&gt; --help
#+END_EXAMPLE

Example:

#+BEGIN_SRC sh
git commit --help
#+END_SRC

To get a list of the options for that command, type:

#+BEGIN_SRC sh
git <command> -h
#+END_SRC

#+BEGIN_EXAMPLE
Example: git commit -h
#+END_EXAMPLE

* Setting up git

#+BEGIN_SRC sh
git config --global user.name "Your Name"
git config --global user.email "your@email.ca"
git config --global color.ui "auto"
git config --global core.editor "nano -w" # or any other text editor you prefer
git config --global core.autocrlf input   # correct line endings if you are on macOS or Linux
git config --global core.autocrlf true    # correct line endings if you are on Windows
git config --list
#+END_SRC

#+BEGIN_VERBATIM
Configure git on your laptop.
#+END_VERBATIM

* Creating a repository

We will create a project called src_sh{project}. You can create it anywhere you wish on your machine.

First, we need to create a directory called src_sh{project} which will be the src_sh{root} of our project (it will contain the entire project).

#+BEGIN_SRC sh
cd /path/where/you/want/your/repository
mkdir project
#+END_SRC

Then, we need to initiate the repository:

#+BEGIN_SRC sh
cd project
git init		# this is what initiates the repository
#+END_SRC

Note that you only initiate a repository once.

Let's inspect our new repository:

#+BEGIN_SRC sh
git status
#+END_SRC

#+BEGIN_VERBATIM
You realize that you started version control on the wrong repository!
How would you undo src_sh{git init}?
#+END_VERBATIM

* Tracking changes

Let's create 3 files in our new repository:

#+BEGIN_SRC sh
touch my_file1.txt
touch my_file2.txt
touch my_file3.txt
#+END_SRC

#+BEGIN_VERBATIM
Inspect your repository now. What has changed?
#+END_VERBATIM

To start tracking a single file (e.g. src_sh{my_file1.txt}), we run:

#+BEGIN_SRC sh
git add my_file1.txt
#+END_SRC

#+BEGIN_VERBATIM
Inspect your repository again. What do you see now?
#+END_VERBATIM

Until you add a file to git with src_sh{git add}, that file is ignored by git.

It could be tedious to add all the files one by one... If you want to add /all/ the files in your repository, you can run:

#+BEGIN_SRC sh
git add .
#+END_SRC

(Note the src_sh{.} which is equivalent to the option src_sh{--all}).

src_sh{my_file1.text} is now staged, but the version of that file is not yet recorded. For this, you need to "commit" it. Each commit has an associated message. You can type it directly when you commit with the option src_sh{-m} (for message), this way:

#+BEGIN_SRC sh
git commit -m "Initial commit"
#+END_SRC

If you simply time src_sh{git commit}, git will open your text editor so that you can type your commit message in it.

Each commit is identified by a unique 40-character checksum hash or SHA-1 hash. People often simply call it a "hash". The short form of a hash only contains the 7 first characters, which is generally sufficient to identify a commit.

#+BEGIN_EXAMPLE
Side note:

It is possible to 

- 
git rev-parse HEAD

- 
git rev-parse --short HEAD

-
git rev-parse --short=<n> HEAD

- Show the entire hash with the digits necessary to uniquely identify it in color:
git rev-parse HEAD | GREP_COLORS='ms=34;1' grep $(git rev-parse --short=0 HEAD)
#+END_EXAMPLE

#+BEGIN_SRC sh
nano my_file1.txt                       # add a few lines to my_file1.txt
git status
git diff
git commit -m "continued my_file1" # likely will be getting an error message
#+END_SRC

You need to stage changes before committing. There are two solutions:

- either

#+BEGIN_SRC sh
git add my_file.txt   # add my_file.txt again to the staging area
git diff   # difference between working copy and staging area
git diff --staged   # difference between staging area and repository
git commit -m "continued my_file notes"
#+END_SRC
		   
- or

#+BEGIN_SRC sh
git commit -a -m "continued my_file1"   # automatically add files that are already being tracked
#+END_SRC

#+BEGIN_VERBATIM
Create bio.txt, add 3 lines, commit to the repository, modify first line, add line 4,
display changes, commit to the repository.
#+END_VERBATIM

* Exploring the project history

To list all the commits of a project, you can run:

#+BEGIN_SRC sh
git log
#+END_SRC

src_sh{HEAD} is a symbolic reference to the currently checked-out commit. src_sh{HEAD~1} (or src_sh{HEAD~}) is the commit before that, src_sh{HEAD~2} the one before that, ...

A commit hash is the first 7 of the 40 characters of the version number of that commit.

#+BEGIN_SRC sh
git diff HEAD~1 my_file1.txt # will show changes on my_file1.txt between HEAD and HEAD~1
git diff HEAD~2 my_file1.txt
git diff <hash> my_file1.txt # will show changes on my_file1.txt between HEAD and commit <hash>
#+END_SRC

* Going back in time

You made changes to src_sh{my_file1.txt}, but would like to . How do you restore it?

#+BEGIN_SRC sh
git checkout HEAD my_file1.txt                  # restore latest from the repository
git checkout specificVersionNumber my_file1.txt # restore specific version from the repository
#+END_SRC

* Ignoring files and directories

There are files you want to version control: code scripts, writing in text files.

But there are also files that you don't want to version control: initial data files (which you should keep unchanged), and any code output (table, new data, graphs).

Let's create such files:

#+BEGIN_SRC sh
mkdir results
touch a.dat b.dat c.dat results/a.out results/b.out
git status
#+END_SRC

So, how can we exclude files or directories from version control?

We create a src_sh{.gitignore file} containing the patterns of files and folders to ignore.

#+BEGIN_SRC sh
nano .gitignore      # add *.dat and results, one per line
git status
git add .gitignore
git commit -m "Add .gitignore file"
git status
git status --ignored # show the ignored files
#+END_SRC

#+BEGIN_accordion
/Note:/ src_sh{.gitignore} patterns
#+END_accordion

#+HTML: <div class="panel">
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| *pattern*           | *example files ignored* | *explanation*                                                                                  |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~**/logs~           | logs/debug.log          |                                                                                                |
|                     | logs/monday/foo.bar     | a double asterisk before a pattern matches directories anywhere in the repository              |
|                     | build/logs/debug.log    | (same as logs/ if I am correct)                                                                |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~**/logs/debug.log~ | logs/debug.log          |                                                                                                |
|                     | build/logs/debug.log    |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | logs/build/debug.log    | a double asterisk matches files based on their name and the name of their parent directory     |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~*.log~             | debug.log               |                                                                                                |
|                     | foo.log                 |                                                                                                |
|                     | .log                    |                                                                                                |
|                     | logs/debug.log          | an asterisk is a wildcard that matches zero or more characters                                 |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~*.log~             | debug.log               |                                                                                                |
| ~!important.log~    | trace.log               |                                                                                                |
|                     | /but not/               | an exclamation mark before a pattern negates it                                                |
|                     | important.log           | if a file matches a pattern as well as a negating pattern defined *later* in the file,         |
|                     | logs/important.log      | it will not be ignored                                                                         |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~*.log~             | debug.log               |                                                                                                |
| ~!important/*.log~  | important/trace.log     |                                                                                                |
| ~trace.*~           | /but not/               |                                                                                                |
|                     | important/debug.log     | patterns defined *after* a negating pattern will *cancel the negation*                         |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~/debug.log~        | debug.log               |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | logs/debug.log          | a slash before a file matches that file in the repository root only                            |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~debug.log~         | debug.log               |                                                                                                |
|                     | logs/debug.log          | by default, patterns match files in any directory                                              |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~debug?.log~        | debug0.log              |                                                                                                |
|                     | debugg.log              |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | debug10.log             | a question mark matches exactly one character                                                  |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~debug[0-9].log~    | debug0.log              |                                                                                                |
|                     | debug1.log              |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | debug10.log             | square brackets with a dash match a character from a specified range                           |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~debug[01].log~     | debug0.log              |                                                                                                |
|                     | debug1.log              |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | debug2.log              |                                                                                                |
|                     | debug01.log             | square brackets match *a single* character from the specified set                              |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~debug[!01].log~    | debug2.log              |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | debug0.log              |                                                                                                |
|                     | debug1.log              |                                                                                                |
|                     | debug01.log             | an exclamation mark in square brackets excludes any character from the specified set           |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~debug[a-z].log~    | debuga.log              |                                                                                                |
|                     | debugb.log              |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | debug1.log              | ranges can be numeric or alphabetic                                                            |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~logs~              | logs                    |                                                                                                |
|                     | logs/debug.log          |                                                                                                |
|                     | logs/latest/foo.bar     |                                                                                                |
|                     | build/logs              |                                                                                                |
|                     | build/logs/debug.log    | with no slash, the pattern matches both files and the contents of directories with that name   |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~logs/~             | logs/debug.log          | with a slash, the pattern only matches directories                                             |
|                     | logs/latest/foo.bar     | (= the entire contents of any directory in the repository matching that name,                  |
|                     | build/logs/foo.bar      | including all of its files and subdirectories)                                                 |
|                     | build/logs/a/debug.log  | (same as **/logs if I am correct)                                                              |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~logs/~             | logs/debug.log          | *warning*                                                                                      |
| ~!logs/imp.log~     | logs/imp.log            | one *cannot* negate a file that is ignored due to a pattern matching a directory               |
|                     |                         | one way to go around that is to force the following of a file which is in an ignored directory |
|                     |                         | with the option -f (git add -f <file>)                                                         |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~logs/**/imp.log~   | logs/imp.log            |                                                                                                |
|                     | logs/monday/imp.log     |                                                                                                |
|                     | logs/monday/pm/imp.log  | a double asterisk matches zero or more directories                                             |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~logs/*day/imp.log~ | logs/monday/imp.log     |                                                                                                |
|                     | logs/tuesday/imp.log    |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | logs/latest/imp.log     | wildcards can be used in directory names as well                                               |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|
| ~logs/debug.log~    | logs/debug.log          |                                                                                                |
|                     | /but not/               |                                                                                                |
|                     | debug.log               |                                                                                                |
|                     | build/logs/debug.log    | patterns specifying a file in a particular directory are relative to the repository root       |
|---------------------+-------------------------+------------------------------------------------------------------------------------------------|

#+BEGIN_right
/reformatted from https://www.atlassian.com/git/tutorials/saving-changes/gitignore/
#+END_right
#+HTML: </div>

* Remotes

There are many different types of remotes: departmental git server, usb key, or Version control repository hosting services like [[https://github.com/][GitHub]], [[https://about.gitlab.com/][GitLab]], or [[https://bitbucket.org/][Bitbucket]].

For instance, here are my personal [[https://github.com/prosoitos][GitHub]] and [[https://gitlab.com/prosoitos][GitLab]] accounts.

#+BEGIN_VERBATIM
You should have already created a GitHub account. If you haven't, do this now.
#+END_VERBATIM

Now, we will create a remote for our src_sh{project} project on GitHub.

#+BEGIN_VERBATIM
Log into github.com and create a new repository called src_sh{project}
#+END_VERBATIM

We need to link our local repository with this remote:

#+BEGIN_SRC sh
git remote add origin git@github.com:prosoitos/project.git
git remote
git remote -v
git push origin master   # to upload to remote, should ask for password.
#+END_SRC

# If GitHub is confused about your identity, you can always specify your GitHub username by hand:

# #+BEGIN_SRC sh
# git remote set-url origin https://razoumov@github.com/razoumov/planets.git
# #+END_SRC

Check your GitHub repository in the web browser.

* Collaborating

As mentioned earlier, git allows you to work with your collaborators synchronously. You don't have to wait for them to be done with a document until you can start working on it.

Public GitHub repositories provide read access to everyone, but only the owner can write to a repository. However, the owner can give write access to his/her collaborators.

#+BEGIN_VERBATIM
*Get into pairs.*

Open your GitHub repository for writing to your partner:

your profile -> repository -> settings -> collaborators and add their GitHub name.
#+END_VERBATIM

Everyone, please clone your partner's GitHub repository:

#+BEGIN_SRC sh
cd    # change to your home directory
pwd   # should now show 'project'
git clone https://github.com/yourPartner/project.git partner
cd partner
nano question.txt   # make some changes to this file, e.g., ask a question
git commit -m -a "describe your changes"
git push origin master
#+END_SRC

Then each one of you will download your partner's edits:

#+BEGIN_SRC sh
cd ~/project
git pull origin master
cat question.txt    # you should see your partner's edits
#+END_SRC

* Resolving conflicts

#+BEGIN_VERBATIM
Two partners: pick one of the two repositories, synchronize them.
Next, each add a line at the end of the same file.
First, partner 1 pushes to the repository.
Next, partner 2 tries to push to the repository... and gets an error.
Partner 2 needs to resolve conflict before he can push.
#+END_VERBATIM

#+BEGIN_SRC sh
git pull origin master
cat contestedFile.txt
nano contestedFile.txt   # edit to resolve conflict: it's up to you what to do
git -a -m "resolved"
git push origin master
#+END_SRC

* Contributing to a GitHub project

#+BEGIN_CENTER
https://user-images.githubusercontent.com/4634851/39488303-a6334690-4d36-11e8-9131-8c99687ac931.png
#+END_CENTER

#+HTML: <style type="text/css">
#+HTML:  ol { list-style-type: upper-alpha; }
#+HTML: </style>
1. fork a project
2. clone it on your machine
3. create a new branch
4. checkout to that new branch
5. make changes
6. push changes to my cloned version
7. make a pull request to initial project

If the owner of the project accepts the pull request, the changes will be integrated in their project.

#+BEGIN_VERBATIM
You will contribute to my GitHub project src_sh{project}.
#+END_VERBATIM

#+HTML: <script>; var acc = document.getElementsByClassName("accordion"); var i; for (i = 0; i < acc.length; i++) {; acc[i].addEventListener("click", function() {; this.classList.toggle("active"); var panel = this.nextElementSibling; if (panel.style.maxHeight){; panel.style.maxHeight = null; } else {; panel.style.maxHeight = panel.scrollHeight + "px"; }; }); }; </script>


* Comments & questions
