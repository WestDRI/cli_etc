#+title: Collaborating through Git
#+subtitle: Example using GitHub as a remote
#+topic: Git
#+slug: git-collab
#+weight: 19

*** /Abstract/

#+BEGIN_definition
Git is a powerful version control system allowing to record, access, and restore the history of projects.

After setting up remotes on the internet or other network, Git is also a mighty collaboration tool.

In this workshop, we will use the popular online Git repository hosting site GitHub to practice a collaboration workflow typical of many research teams.
#+END_definition

*** /Software requirements/

#+BEGIN_box
*1 - Properly configured Git*

{{<n>}}{{<n>}}You can download Git [[https://gitforwindows.org/][here]]  if you are on Windows and [[https://git-scm.com/downloads][here]] if you use MacOS or Linux.

{{<n>}}{{<n>}}These minimum configurations [[https://westgrid-cli.netlify.app/school/git-03-install/#headline-3][should be set properly]]: \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your user name \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your email address \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your preferred text editor \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- the end of line formatting matching your operating system
{{<2br>}}
*2 - GitHub account*

{{<n>}}{{<n>}}A free [[https://github.com/join?plan=free&source=pricing-card-free][GitHub account]].

{{<n>}}{{<n>}}(Optional) If you don't want to type your password all the time, [[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][set SSH for your account]].
#+END_box

*** /Prerequisites/

#+BEGIN_simplebox
*Basic knowledge of Git*:

{{<n>}}{{<n>}}- familiarity with the concept of staging area, \\
{{<n>}}{{<n>}}- experience with staging and committing.
#+END_simplebox

{{<br>}}

#+BEGIN_bigquo
Git is a great tool for version control. But how can it be used to collaborate on projects?
#+END_bigquo

* Remotes

** To collaborate, you need a syncing hub

Git projects are local and self-contained: except for a few configuration files, everything lives in the root of your project. To work jointly with your collaborators however, everybody needs to have access to the project.

Git has a great solution for this: remotes.

** What are remotes, really?

Remotes are copies of a project that reside outside of it and are connected to it so that data can be synced back and forth. "Outside" can be anywhere, including on an external drive, or even on the same machine. If you want your remotes to serve as backups, you want them outside your machine. And if you want your remotes to allow for collaboration, you want them on a network your collaborators have access to. One option, of course, is the internet.

A project can have several remotes. An address (or a path if they are local) specifies their location.

A number of online Git repository managers have become popular remote hosting sites. These include [[https://github.com][GitHub]], [[https://gitlab.com][GitLab]], and [[https://bitbucket.org][Bitbucket]]. Today, we will use GitHub.

* Collaborating on projects through Git and GitHub

There are multiple scenarios:

- You created a project on your machine, put it under version control, and now you want others to contribute to it.
- You want to contribute to a project started by others.

   {{<m>}}◦{{<n>}}You do not have write access to the GitHub repository.

   {{<m>}}◦{{<n>}}You were granted write access to it.

Let's go over these scenarios.


* You create a project and want others to contribute to it

Let's quickly create a project:

#+BEGIN_src sh
$ cd /location/of/new/project
$ mkdir myproject
$ cd myproject
$ echo "This is our great project" > README
#+END_src

This is the content of our project:

#+BEGIN_src sh
$ ls -a
.  ..  README
#+END_src

Then, let's put it under version control with Git:

#+BEGIN_src sh
$ git init
#+END_src

You can see that this is now a Git repository:

#+BEGIN_src sh
$ ls -a
.  ..  .git  README
#+END_src

Let's create a first commit:

#+BEGIN_src sh
$ git add README
$ git commit -m "Initial commit: add README"
#+END_src

Now, you need to create a remote on GitHub.

First, you need to create a new GitHub repository.

** Creating an empty repository on GitHub

Go to [[https://github.com][https://github.com]], login, and go to your home page (https://github.com/<user>).

From there, select the {{<b>}}Repositories{{</b>}} tab, then click the green {{<b>}}New{{</b>}} button.

Enter the name you want for your repo, *without spaces*. It can be the same name you have for your project on your computer (it would be sensible and make things less confusing), but it doesn't have to be.

You can make your repository public or private. Choose the private option if your research contains sensitive data or you do not want to share your project with the world. If you want to develop open source projects, of course, you want to make them public.

Then, you have this empty repository on GitHub, but it is not connected to your local repository.

** Adding the new GitHub repo as a remote

Click on the {{<b>}}Code{{</b>}} green drop-down button, select SSH (if you have set SSH for your GitHub account) or HTTPS (if you haven't) and copy the address.

Then, go back to your command line, ~cd~ inside your project if you aren't already there and add your remote.

You add a remote with:

#+BEGIN_syntax
git remote add <remote-name> <remote-address>
#+END_syntax

{{<b>}}&lt;remote-name&gt;{{</b>}} is only a convenience name that will identify that remote. You can choose any name, but since Git automatically call the remote ~origin~ when you clone a repo, it is common practice to use ~origin~ as the name for the first remote.

{{<b>}}&lt;remote-address&gt;{{</b>}} is the address of your remote in the https form or—[[https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh][if you have set SSH for your GitHub account]]—the SSH form.

#+BEGIN_note
Example (using an SSH address):
#+END_note

#+BEGIN_syntax
git remote add origin git@github.com:<user>/<repo>.git
#+END_syntax

In our case:

#+BEGIN_src sh
$ git remote add origin git@github.com:<user>/myproject.git
#+END_src

#+BEGIN_note
Example (using an HTTPS address):
#+END_note

#+BEGIN_syntax
git remote add origin https://github.com/<user>/<repo>.git
#+END_syntax

In our case:

#+BEGIN_src sh
$ git remote add origin https://github.com/<user>/myproject.git
#+END_src

(Type: ~git remote add origin~, then paste the address you have just copied on GitHub).

Finally, if you want to grant your collaborators write access to the project, you need to add them to it (note that you don't have to give them write access: we will see later how one can contribute to a project without having write access to it. But if you are involved in a serious collaboration with others on a project, you might want to facilitate the process by letting them edit the project directly).

** Inviting collaborators to a GitHub repo

- Go to your GitHub project page
- Click on the {{<b>}}Settings{{</b>}} tab
- Click on the {{<b>}}Manage access{{</b>}} section on the left-hand side (you will be prompted for your GitHub password)
- Click on the {{<b>}}Invite a collaborator{{</b>}} green button
- Invite your collaborators with one of their GitHub user name, their email address, or their full name

** Getting information on remotes

To list remotes, run:

#+BEGIN_src sh
git remote
#+END_src

To list the remotes with their addresses:

#+BEGIN_src sh
git remote -v
#+END_src

You can see that your local project now has a remote called ~origin~ and that it has the address of your GitHub repo.

To get yet more information about a particular remote, you can run:

#+BEGIN_syntax
git remote show <remote-name>
#+END_syntax

For instance, to inspect your new remote, run:

#+BEGIN_src sh
git remote show origin
#+END_src

** Managing remotes

You rename a remote with:

#+BEGIN_syntax
git remote rename <old-remote-name> <new-remote-name>
#+END_syntax

And you delete a remote with:

#+BEGIN_syntax
git remote remove <remote-name>
#+END_syntax

You can change the url of the remote with:

#+BEGIN_syntax
git remote set-url <remote-name> <new-url> [<old-url>]
#+END_syntax

** Working with remotes

*** Downloading data from the remote

If you collaborate on your project through the GitHub remote, you will have to download data added by your teammates to keep your local project up to date.

To download new data from the remote, you have 2 options: ~git fetch~ and ~git pull~.

**** Fetching changes

/Fetching/ downloads the data from your remote that you don't already have in your local version of the project.

#+BEGIN_syntax
git fetch <remote-name>
#+END_syntax

The branches on the remote are now accessible locally as ~<remote-name>/<branch>~. You can inspect them or you can merge them into your local branches.

#+BEGIN_note
Example: To fetch from your new GitHub remote, you would run:
#+END_note

#+BEGIN_src sh
git fetch origin
#+END_src

**** Pulling changes

/Pulling/ does 2 things: it fetches the data (as we just saw) and it then merges the changes onto your local branches.

#+BEGIN_syntax
git pull <remote-name> <branch>
#+END_syntax

#+BEGIN_note
Example
#+END_note

#+BEGIN_src sh
git pull origin master
#+END_src

If your branch is already tracking a remote branch (see below), then you simply need to run:

#+BEGIN_src sh
git pull
#+END_src

Now, how do you upload data /to/ the remote?

*** Pushing to a remote

Uploading data to the remote is called /pushing/ and is done with:

#+BEGIN_syntax
git push <remote-name> <branch-name>
#+END_syntax

To push your branch ~master~ to the remote ~origin~:

#+BEGIN_src sh
git push origin master
#+END_src

You can also set an upstream branch to track a local branch with the ~-u~ flag:

#+BEGIN_src sh
git push -u origin master
#+END_src

From now on, all you have to run when you are on ~master~ is:

#+BEGIN_src sh
git push
#+END_src

Git knows that your local ~master~ branch is being tracked by the upstream ~master~ branch.

* You want to contribute to a project created by someone else

When you want to contribute to someone's project, you are in one of two scenarios: either you have write access to the project or you don't.

** Read access only

If you do not have write access to the remote, you cannot push to it and you need to submit a pull request (PR).

Let's try it using [[https://github.com/razoumov/git_practice][this project]].

*** Setup

Here is how to set things up:

#+BEGIN_box
1. Fork the project.
2. Clone your fork on your machine (this will automatically set your fork as a remote to your new local project and that remote is automatically called ~origin~).
3. Add a second remote, this one pointing to the initial project. Usually, people call that remote ~upstream~.
#+END_box

***** Fork the repo

First, go to GitHub and fork the project by clicking on the {{<b>}}Fork{{</b>}} button in the top right corner.

***** Clone your fork

Then, navigate to the directory in which you want to clone the project and clone your fork:

#+BEGIN_src sh
$ cd /location/of/new/project
#+END_src

There are 2 ways to clone a project. If you have [[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][set SSH for your account]], the command is:

#+BEGIN_syntax
git clone git@github.com:<user>/<repo>.git
#+END_syntax

Here:

#+BEGIN_src sh
$ git clone git@github.com:<user>/git_practice.git
#+END_src

If you haven't set SSH for your account, use the HTTPS address and enter your GitHub user name and password when prompted. The general command looks like this:

#+BEGIN_syntax
git clone https://github.com/<user>/<repo>.git
#+END_syntax

Here:

#+BEGIN_src sh
$ git clone https://github.com/<user>/git_practice.git
#+END_src

Note that, if you want to give your copy of the project a different name, you can clone it with either of:

#+BEGIN_syntax
git clone git@github.com:<user>/<repo>.git <name>

git clone https://github.com/<user>/<repo>.git <name>
#+END_syntax

***** Add the initial project as upstream

We already saw how to add a remote:

#+BEGIN_src sh
$ git remote add upstream git@github.com:razoumov/git_practice.git
#+END_src

#+BEGIN_note
- Make sure to use 'upstream' and not 'origin' for the name of this remote
- Make sure to use the address of the initial project and not your fork
#+END_note

From there on, you can:

- Pull from ~upstream~ (the repo to which you do not have write access and to which you want to contribute). This allows you to keep your fork up-to-date.

- Push to and pull from ~origin~ (this is your fork, to which you have read and write access).

*** Pull request

You are now ready to submit pull requests.

Here is the workflow:

#+BEGIN_box
1. Pull from ~upstream~ to make sure that your contributions are made on an up-to-date version of the project
2. Create and checkout a new branch
3. Make and commit your changes on that branch
4. Push that branch to your fork (i.e. ~origin~ — remember that you do not have write access on ~upstream~)
5. Go to the original project GitHub's page and open a pull request from your fork. Note that after you have pushed your branch to origin, GitHub will automatically offer you to do so.
#+END_box

The maintainer of the original project may accept or decline the PR. They may also make comments and ask you to make changes. If so, make new changes and push additional commits to that branch.

Once the PR is merged by the maintainer, you can delete the branch on your fork and pull from ~upstream~ to update your local fork with the recently accepted changes.

Let's try this with our new project.

** Read/write access

If you have write access to the project, you can clone the project directly, without forking it, and push changes to it.

This is a very simple setup: the copy on GitHub is the central copy—the one allowing various team members to work jointly on the same project. You now have a copy of it (as well as its entire history) on your machine and you push and pull freely to/from it. Your collaborators have their own copies on their own machines and can also freely push/pull to the same remote.

* Comments & questions
