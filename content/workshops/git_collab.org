#+title: Collaborating through Git
#+subtitle: Example using GitHub as a remote
#+topic: Git
#+slug: git-collab

*** /Abstract/

#+BEGIN_definition
Git is a powerful version control system allowing to record, access, and restore the history of projects.

After setting up remotes on the internet or other network, Git is also a mighty collaboration tool.

In this workshop, we will use the popular online Git repository hosting site GitHub to practice a collaboration workflow typical of many research teams.
#+END_definition

*** /Software requirements/

#+BEGIN_box
*1 - Properly configured Git*

{{<n>}}{{<n>}}You can download Git [[https://gitforwindows.org/][here]]  if you are on Windows and [[https://git-scm.com/downloads][here]] if you use MacOS or Linux.

{{<n>}}{{<n>}}These minimum configurations [[https://westgrid-cli.netlify.app/school/git-03-install/#headline-3][should be set properly]]: \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your user name \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your email address \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your preferred text editor \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- the end of line formatting matching your operating system
{{<2br>}}
*2 - GitHub account*

{{<n>}}{{<n>}}A free [[https://github.com/join?plan=free&source=pricing-card-free][GitHub account]].

{{<n>}}{{<n>}}(Optional) If you don't want to type your password all the time, [[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][set SSH for your account]].
#+END_box

*** /Prerequisites/

#+BEGIN_simplebox
*Basic knowledge of Git*:

{{<n>}}{{<n>}}- familiarity with the concept of staging area, \\
{{<n>}}{{<n>}}- experience with staging and committing.
#+END_simplebox

* Remotes

** What are remotes, really?
{{<br>}}

Remotes are versions of your project that reside outside your project. "Outside" can be anywhere, even on the same machine. Often however, remotes are on a different machine to serve as backup or on a network (possibly the internet) to be accessible by several persons and serve as a syncing hub for collaborations.
#+BEGIN_bigquo
Git is a great tool for version control. But how can it be used to collaborate on projects?
#+END_bigquo

A number of online Git repository managers and hosting services have become popular remotes for Git projects. These include [[https://github.com][GitHub]], [[https://gitlab.com][GitLab]], and [[https://bitbucket.org][Bitbucket]].

A project can have several remotes. These remotes are characterized by an address (or a path if they are local) and identified by a name of your choice.

When you clone a repository, the initial repository automatically becomes a remote of your newly created clone and is given the name ~origin~ by Git.

This means that, now that we have cloned a project from GitHub, our new local version already has a remote called ~origin~. You could rename the remote to something else, but it is common practice to keep ~origin~ as the name of the first remote of a project.

** How to see which remotes are associated with my project?

To list your remotes, run:

#+BEGIN_src sh
git remote
#+END_src

To list the remotes with their addresses:

#+BEGIN_src sh
git remote -v
#+END_src

You can verify that your local clone indeed has a remote and that its address matches that of the GitHub project we just cloned.

To get yet more information about a particular remote, you can run:

#+BEGIN_src sh
git remote show <remote-name>
#+END_src

For instance, to inspect your new remote, run:

#+BEGIN_src sh
git remote show origin
#+END_src

** Managing remotes

You add a remote with:

#+BEGIN_src sh
git remote add <remote-name> <remote-url>
#+END_src

You can rename a remote with:

#+BEGIN_src sh
git remote rename <old-name> <new-name>
#+END_src

And you delete a remote with:

#+BEGIN_src sh
git remote rm <remote-name>
#+END_src

You can change the url of the remote with:

#+BEGIN_src sh
git remote set-url <remote-name> <new-url> [<old-url>]
#+END_src

* Contributing to a project

While contributing to a project, you are in one of two scenarios: either you have write access to the project or you do not.

** Read/write access

If you have write access to the project, you can clone the project and directly push changes to it.

*** Cloning a GitHub repository

Cloning a repository creates a local version of a project on your machine.

First, navigate to the directory in which you want to clone the project:

#+BEGIN_src sh
cd /place/where/you/want/to/have/your/project
#+END_src

Then, clone the project.

There are 2 ways to do this. If you have [[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][set SSH for your account]], the command is:

#+BEGIN_src sh
git clone git@github.com:<user>/<repo>.git
#+END_src

In our case, this is:

#+BEGIN_src sh
git clone git@github.com:prosoitos/git_workshop_collab.git
#+END_src

If you haven't set SSH for your account, use the HTTPS address and enter your GitHub user name and password when prompted. The general command looks like this:

#+BEGIN_src sh
git clone https://github.com/<user>/<repo>.git
#+END_src

With our project:

#+BEGIN_src sh
git clone https://github.com/prosoitos/git_workshop_collab.git
#+END_src

Note that, if you want to give your copy of the project a different name, you can clone it with either of:

#+BEGIN_src sh
git clone git@github.com:<user>/<repo>.git <name-of-your-copy>
git clone https://github.com/<user>/<repo>.git <name-of-your-copy>
#+END_src

The copy on GitHub is the central copy—the one allowing various team members to work jointly on the same project. But you now have a copy of it (as well as its entire history) on your machine. Your collaborators have their own clones on their own machines.

*** Keeping the repository up to date

Another important thing is to make sure to keep your clone up to date. Your collaborators will make changes to the project on their local clones and push those changes to the GitHub repo. When you cloned the project, you obtained an up-to-date copy. Over time however, that copy will become outdated.

To download new data from the remote (the copy of the project on GitHub), you have 2 options: ~git fetch~ and ~git pull~.

**** Fetching changes

Fetching downloads the data from your remote that you don't already have in your local version of the project.

#+BEGIN_src sh
git fetch <remote-name>
#+END_src

The branches on the remote are now accessible locally as ~<remote-name>/<branch>~. You can inspect them or you can merge them into your local branches.

To fetch from our GitHub remote, we would run:

#+BEGIN_src sh
git fetch origin
#+END_src

**** Pulling changes

Pulling does 2 things: it fetches the data (as we just saw) and it then merges the changes onto your local branches.

#+BEGIN_src sh
git pull <remote-name> <branch>
#+END_src

In our case:

#+BEGIN_src sh
git pull origin master
#+END_src

If your branch is already tracking a remote branch (see below), then you simply need to run:

#+BEGIN_src sh
git pull
#+END_src

Now, how do you push your changes to the remote?

*** Pushing to a remote

#+BEGIN_src sh
git push <remote-name> <branch-name>
#+END_src

If you want to push your ~master~ branch to ~origin~, you would run:

#+BEGIN_src sh
git push origin master
#+END_src

When you cloned the repository, Git also automatically associated your branch ~master~ with the ~master~ branch of ~origin~. So, if you are on the ~master~ branch, you could simply run:

#+BEGIN_src sh
git push
#+END_src

If you want to push another branch to ~origin~, you will have to run the full command:

#+BEGIN_src sh
git push origin <branch-name>
#+END_src

If you want to be able to push the content of that branch by simply running ~git push~ when you are on that branch, you need to set the upstream branch to track your local branch. This can be done by pushing once with the ~-u~ flag:

#+BEGIN_src sh
git push -u origin <branch-name>
#+END_src

From now on, ~git push~ will be enough to push from that branch to ~origin~.

** Read access only

If you do not have write access to the remote, you cannot push to it and you need to submit a pull request (PR).

For this workshop, this is the scenario that we will practice, using [[https://github.com/prosoitos/git_collab][this project]].

*** Fork setup

Here is how to set things up in this scenario:

#+BEGIN_box
1. Fork the project
2. Clone your fork on your machine (remember that this will automatically set the GitHub repo—that is, your fork—as the remote called ~origin~)
3. Add a second remote, this one pointing to the initial project. Usually, that one is called ~upstream~
#+END_box

From here on, you can:

- pull from ~upstream~ (the repo to which you do not have write access and to which you want to contribute). This allows you to keep your fork up-to-date.

- push to and pull from ~origin~ (this is your fork, to which you have read and write access).

*** Pull request

You are now ready to submit pull requests.

Here is the workflow:

#+BEGIN_box
1. Pull from ~upstream~ to make sure that your contributions are made on an up-to-date version of the project
2. Create and checkout a new branch
3. Make and commit your changes on that branch
4. Push that branch to your fork (i.e. ~origin~ — remember that you do not have write access on ~upstream~)
5. Go to the original project GitHub's page and open a pull request from your fork. Note that after you have pushed your branch to origin, GitHub will automatically offer you to do so.
#+END_box

The maintainer of the original project may accept or decline the PR. They may also make comments and ask you to make changes. If so, make new changes and push additional commits to that branch.

Once the PR is merged by the maintainer, you can delete the branch on your fork and pull from ~upstream~ to update your local fork with the recently accepted changes.

[[https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project][This chapter of the Pro Git book]] covers this workflow in great details.

* Starting a collaborative project

So far, we have seen how to clone, then contribute to, a project that was already started by someone else.

What if you would like to start a project and allow others to contribute to it through a GitHub remote?

** Initializing a project

First, you need to start a project.

If you are starting a project from scratch, navigate to the location where you would like to create it, then make a new directory for the project:

#+BEGIN_src sh
cd /path/where/you/want/your/project
mkdir <project-name>
#+END_src

If you already have a project, but it is not under version control yet, simply ~cd~ to your project:

#+BEGIN_src sh
cd /path/to/project
#+END_src

Either way, once you hare inside your project, you need to put it under version control by initializing a Git repository:

#+BEGIN_src sh
git init
#+END_src

*Note: do make sure that you are inside the project before running ~git init~. A very common mistake is to run the command outside the project.*

You now have a Git repo. You can verify by running ~ls -a~ from the root of the project and see that you have a ~.git~ directory.

** Adding a remote

Your project does not have any remote: ~git remote~ does not return anything.

If you want to add a remote on GitHub, first you have to go create it.

*** Creating an empty repository on GitHub

Go to https://github.com, login, and go to your home page (https://github.com/<user>).

From there, select the {{<b>}}Repositories{{</b>}} tab, then click the green {{<b>}}New{{</b>}} button.

Enter the name you want for your repo, *without spaces*. It can be the same name you have for your project on your computer (it would be sensible and make things less confusing), but it doesn't have to be.

You can make your repository public or private. Choose the private option if your research contains sensitive data or you do not want to share your project with the world. If you want to develop open source projects, of course, you want to make them public.

Click on the {{<b>}}Code{{</b>}} green drop-down button, select SSH or HTTPS and copy the address of the repo.

*** Adding the new GitHub repo as a remote

Now, go back to your command line, ~cd~ inside your project if you aren't already there and run either of:

#+BEGIN_src sh
git remote add <remote-name> git@github.com:<user>/<repo>.git
git remote add <remote-name> https://github.com/<user>/<repo>.git
#+END_src

(Paste the address you have just copied on GitHub after ~git remote add <remote-name>~).

~<remote-name>~ is only a convenience name that will identify that remote. You can choose any name. But, since Git automatically call the remote ~origin~ when you clone a repo, it is common practice to use ~origin~ as the name for the first remote.

You can now see that your local project now has a remote called ~origin~ and that it has the address of your GitHub repo if you run ~git remote -v~.

If you were working alone on this project and only wanted to have a remote for backup, you would be set.

If you don't want to grant others write access to the project and only accept contributions through pull requests, you are also set.

If you want to grant your collaborators write access to the project however, you need to add them to it.

** Inviting collaborators to a GitHub repo

- Go to your GitHub project page
- Click on the {{<b>}}Settings{{</b>}} tab
- Click on the {{<b>}}Manage access{{</b>}} section on the left-hand side (you will be prompted for your GitHub password)
- Click on the {{<b>}}Invite a collaborator{{</b>}} green button
- Invite your collaborators with one of their GitHub user name, their email address, or their full name

* Comments & questions
