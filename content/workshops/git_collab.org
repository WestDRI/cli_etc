#+title: Collaborating through Git
#+subtitle: Example using GitHub as a remote
#+topic: Git
#+slug: git-collab

*** /Abstract/

#+BEGIN_definition
Git is a powerful version control system allowing to record, access, and restore the history of projects.

After setting up remotes on the internet or other network, Git is also a mighty collaboration tool.

In this workshop, we will use the popular online Git repository hosting site GitHub to practice a collaboration workflow typical of many research teams.
#+END_definition

*** /Software requirements/

#+BEGIN_box
*1 - Properly configured Git*

{{<n>}}{{<n>}}You can download Git [[https://gitforwindows.org/][here]]  if you are on Windows and [[https://git-scm.com/downloads][here]] if you use MacOS or Linux.

{{<n>}}{{<n>}}These minimum configurations [[https://westgrid-cli.netlify.app/school/git-03-install/#headline-3][should be set properly]]: \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your user name \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your email address \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- your preferred text editor \\
{{<n>}}{{<n>}}{{<n>}}{{<n>}}- the end of line formatting matching your operating system
{{<2br>}}
*2 - GitHub account*

{{<n>}}{{<n>}}A free [[https://github.com/join?plan=free&source=pricing-card-free][GitHub account]].

{{<n>}}{{<n>}}(Optional) If you don't want to type your password all the time, [[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][set SSH for your account]].
#+END_box

*** /Prerequisites/

#+BEGIN_simplebox
*Basic knowledge of Git*:

{{<n>}}{{<n>}}- familiarity with the concept of staging area, \\
{{<n>}}{{<n>}}- experience with staging and committing.
#+END_simplebox

{{<br>}}

#+BEGIN_bigquo
Git is a great tool for version control. But how can it be used to collaborate on projects?
#+END_bigquo

* Remotes

** To collaborate, you need a syncing hub

Git projects are local and self-contained: except for a few configuration files, everything lives in the root of your project. To work jointly with your collaborators however, everybody needs to have access to the project.

Git has a great solution for this: remotes.

** What are remotes, really?

Remotes are copies of a project that reside outside of it and are connected to it so that data can be synced back and forth. "Outside" can be anywhere, including on an external drive, or even on the same machine. If you want your remotes to serve as backups, you want them outside your machine. And if you want your remotes to allow for collaboration, you want them on a network your collaborators have access to. One option, of course, is the internet.

A project can have several remotes. An address (or a path if they are local) specifies their location.

A number of online Git repository managers have become popular remote hosting sites. These include [[https://github.com][GitHub]], [[https://gitlab.com][GitLab]], and [[https://bitbucket.org][Bitbucket]]. Today, we will use GitHub.

* Collaborating on projects through Git and GitHub

There are multiple scenarios:

- You created a project on your machine, put it under version control, and now you want others to contribute to it.
- You want to contribute to a project started by others.

   {{<m>}}◦{{<n>}}You do not have write access to the GitHub repository.

   {{<m>}}◦{{<n>}}You were granted write access to it.

Let's go over these scenarios.




















#+BEGIN_src sh
#+END_src


#+BEGIN_src sh
#+END_src


#+BEGIN_src sh
#+END_src


#+BEGIN_src sh
#+END_src


#+BEGIN_src sh
#+END_src





**** Fetching changes


git fetch <remote-name>

The branches on the remote are now accessible locally as ~<remote-name>/<branch>~. You can inspect them or you can merge them into your local branches.


#+BEGIN_src sh
git fetch origin
#+END_src

**** Pulling changes


git pull <remote-name> <branch>


#+BEGIN_src sh
git pull origin master
#+END_src

If your branch is already tracking a remote branch (see below), then you simply need to run:

#+BEGIN_src sh
git pull
#+END_src


*** Pushing to a remote

git push <remote-name> <branch-name>


#+BEGIN_src sh
git push origin master
#+END_src


#+BEGIN_src sh
#+END_src


#+BEGIN_src sh
#+END_src




** Read access only

If you do not have write access to the remote, you cannot push to it and you need to submit a pull request (PR).




#+BEGIN_box
#+END_box









#+BEGIN_src sh
#+END_src



Either way, once you hare inside your project, you need to put it under version control by initializing a Git repository:

#+BEGIN_src sh
git init
#+END_src

*Note: do make sure that you are inside the project before running ~git init~. A very common mistake is to run the command outside the project.*

You now have a Git repo. You can verify by running ~ls -a~ from the root of the project and see that you have a ~.git~ directory.

** Adding a remote

Your project does not have any remote: ~git remote~ does not return anything.

If you want to add a remote on GitHub, first you have to go create it.

*** Creating an empty repository on GitHub

Go to https://github.com, login, and go to your home page (https://github.com/<user>).

From there, select the {{<b>}}Repositories{{</b>}} tab, then click the green {{<b>}}New{{</b>}} button.

Enter the name you want for your repo, *without spaces*. It can be the same name you have for your project on your computer (it would be sensible and make things less confusing), but it doesn't have to be.

You can make your repository public or private. Choose the private option if your research contains sensitive data or you do not want to share your project with the world. If you want to develop open source projects, of course, you want to make them public.

Click on the {{<b>}}Code{{</b>}} green drop-down button, select SSH or HTTPS and copy the address of the repo.

*** Adding the new GitHub repo as a remote

Now, go back to your command line, ~cd~ inside your project if you aren't already there and run either of:

#+BEGIN_src sh
git remote add <remote-name> git@github.com:<user>/<repo>.git
git remote add <remote-name> https://github.com/<user>/<repo>.git
#+END_src

(Paste the address you have just copied on GitHub after ~git remote add <remote-name>~).

~<remote-name>~ is only a convenience name that will identify that remote. You can choose any name. But, since Git automatically call the remote ~origin~ when you clone a repo, it is common practice to use ~origin~ as the name for the first remote.

You can now see that your local project now has a remote called ~origin~ and that it has the address of your GitHub repo if you run ~git remote -v~.

If you were working alone on this project and only wanted to have a remote for backup, you would be set.

If you don't want to grant others write access to the project and only accept contributions through pull requests, you are also set.

If you want to grant your collaborators write access to the project however, you need to add them to it.

** Inviting collaborators to a GitHub repo

- Go to your GitHub project page
- Click on the {{<b>}}Settings{{</b>}} tab
- Click on the {{<b>}}Manage access{{</b>}} section on the left-hand side (you will be prompted for your GitHub password)
- Click on the {{<b>}}Invite a collaborator{{</b>}} green button
- Invite your collaborators with one of their GitHub user name, their email address, or their full name

* Comments & questions
